#include<bits/stdc++.h>
using namespace std;
vector<int> generateprime(int n) {
    vector<bool> isPrime(n + 1, true);
    vector<int> primes;

    for (int p = 2; p * p <= n; p++) {
        if (isPrime[p]==true) {
            for (int i = p * p; i <= n; i += p) {
                isPrime[i] = false;
            }
        }
    }

    for (int p = 2; p <= n; p++) {
        if (isPrime[p]==true) {
            primes.push_back(p);
        }
    }

    return primes;
}
void getprimes(int L, int R) {
    int sqrtR = static_cast<int>(sqrt(R));
    vector<int> primes = generateprime(sqrtR);

    int n = R - L + 1;
    vector<bool> isPrime(n, true);

    for (int p : primes) {
        int start = max(p * p, (L + p - 1) / p * p); // Find the first multiple of p >= L
        for (int i = start; i <= R; i += p) {
            isPrime[i - L] = false;
        }
    }

    for (int i = 0; i < n; i++) {
        if (isPrime[i]==true) {
            cout << i + L << " ";
        }
    }
    cout << endl;
}
int main()
{
  int l , r;
  cin>>l>>r;

  getprimes(l,r);
  return 0; 
}
